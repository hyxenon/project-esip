// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  role          UserRole
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  school        School?         @relation(fields: [schoolId], references: [id])
  schoolId      String?
  isPending     Boolean?
  ResearchPaper ResearchPaper[]
  Comment       Comment[]
  Likes         Like[]
  PaperView     PaperView[]
  PaperPurchase PaperPurchase[]

  // History relations
  performedUserHistories  UserHistory[]  @relation("PerformedUserHistory")
  performedPaperHistories PaperHistory[] @relation("PerformedPaperHistory")
  savedPapers             SavedPaper[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// School
model School {
  id              String   @id @default(cuid())
  email           String
  city            String
  contactNumber   String
  postalCode      String
  province        String
  schoolName      String
  streetAddress   String
  image           String?
  status          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  User            User[]
  AIDataAnalytics String?
}

model ResearchPaper {
  id                 String          @id @default(cuid())
  title              String
  researchAdviser    String
  researchConsultant String
  researchCategory   String
  researchType       String
  date               DateTime
  introduction       String
  abstract           String?
  references         String
  file               String?
  wonCompetition     String?         @default("none")
  wonCompetitonFile  String?
  grade              String?
  isPublic           Boolean         @default(false)
  price              Int?
  views              Int             @default(0)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  userId             String
  user               User            @relation(fields: [userId], references: [id])
  comments           Comment[]
  authors            Author[]
  keywords           String[]
  PaperView          PaperView[]
  PaperPurchase      PaperPurchase[]
  savedByUsers       SavedPaper[]
}

model SavedPaper {
  id        String        @id @default(cuid())
  userId    String
  paperId   String
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  paper     ResearchPaper @relation(fields: [paperId], references: [id], onDelete: Cascade)

  @@unique([userId, paperId]) // Ensures a user can't save the same paper more than once
}

model Author {
  id   String @id @default(cuid())
  name String

  ResearchPaper   ResearchPaper? @relation(fields: [researchPaperId], references: [id], onDelete: Cascade)
  researchPaperId String?
}

model Comment {
  id              String        @id @default(cuid())
  content         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  researchPaperId String
  researchPaper   ResearchPaper @relation(fields: [researchPaperId], references: [id], onDelete: Cascade)
  parent          Comment?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children        Comment[]     @relation("ParentChild")
  parentId        String?
  Likes           Like[]
}

model Like {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String

  @@id([userId, commentId])
}

model PaperView {
  id       String   @id @default(cuid())
  userId   String
  paperId  String
  viewedAt DateTime @default(now())

  user  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  paper ResearchPaper @relation(fields: [paperId], references: [id], onDelete: Cascade)

  @@unique([userId, paperId])
}

model PaperPurchase {
  id          String        @id @default(cuid())
  userId      String
  paperId     String
  paper       ResearchPaper @relation(fields: [paperId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentLink String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([userId, paperId])
}

model UserHistory {
  id            String         @id @default(cuid())
  action        UserActionType
  performedById String
  performedBy   User           @relation("PerformedUserHistory", fields: [performedById], references: [id])
  targetName    String
  createdAt     DateTime       @default(now())
}

model PaperHistory {
  id              String          @id @default(cuid())
  action          PaperActionType
  performedById   String
  performedBy     User            @relation("PerformedPaperHistory", fields: [performedById], references: [id])
  targetPaperName String
  createdAt       DateTime        @default(now())
}

enum UserActionType {
  CREATE
  EDIT
  DELETE
}

enum PaperActionType {
  CREATE
  EDIT
  DELETE
}
