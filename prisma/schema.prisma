// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  role          UserRole
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  school        School?         @relation(fields: [schoolId], references: [id])
  schoolId      String?
  isPending     Boolean?
  ResearchPaper ResearchPaper[]
  Comment       Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// School
model School {
  id            String   @id @default(cuid())
  email         String
  city          String
  contactNumber String
  postalCode    String
  province      String
  schoolName    String
  streetAddress String
  image         String?
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          User[]
}

model ResearchPaper {
  id                 String    @id @default(cuid())
  title              String
  researchAdviser    String
  researchConsultant String
  researchCategory   String
  researchType       String
  date               DateTime
  introduction       String
  abstract           String?
  references         String
  file               String?
  grade              String?
  isPublic           Boolean   @default(false)
  views              Int       @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  comments           Comment[]
  authors            Author[]
  keywords           String[]
}

model Author {
  id   String @id @default(cuid())
  name String

  ResearchPaper   ResearchPaper? @relation(fields: [researchPaperId], references: [id], onDelete: Cascade)
  researchPaperId String?
}

model Comment {
  id              String        @id @default(cuid())
  content         String
  createdAt       DateTime      @default(now())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  researchPaperId String
  researchPaper   ResearchPaper @relation(fields: [researchPaperId], references: [id], onDelete: Cascade)
}
